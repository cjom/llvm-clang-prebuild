name: Build llvm-clang

on:
  workflow_dispatch:
    inputs:
      packagename:
        description: 'Package to delete (and recompile)'
        required: false
      usecache:
        description: 'Use cache to resume previous'
        required: false
        type: boolean
        default: false
      downloadreleased:
        description: 'Get released if exists'
        required: false
        type: boolean
        default: false

concurrency:
    group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
  contents: write

env:
  LANG: en_US.UTF-8
  LANGUAGE: en_US:en
  LC_ALL: en_US.UTF-8
  FORCE_UNSAFE_CONFIGURE: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build llvm-clang
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.prepare_step.outputs.version }}
      dorelease: ${{ false || steps.compile_step.outputs.dorelease }}
    strategy:
      matrix:
        platform: [bcm2711, bcm2712, bcm2835, h3, h5, jh7110, jz4770, rk3288, rk3326, rk3399, rk3588, s905gen3, s812, s922x, asahi, x86_64, x86_64_v3]
      fail-fast: false
    steps:
      - name: Install pkgs
        id: install_step
        shell: bash
        run: |
          #Install needed packages
          sudo apt-get update
          sudo apt-get remove -y '*cloud*' '*firefox*' '*chrome*' '*dotnet*' '*php*' '*cloud*'
          sudo apt-get upgrade -y
          sudo apt-get install -y build-essential bsdmainutils cmake git libncurses6 libncurses-dev libssl-dev mercurial texinfo zip default-jre imagemagick subversion autoconf automake bison scons libglib2.0-dev bc mtools u-boot-tools flex wget cpio dosfstools libtool rsync device-tree-compiler gettext locales graphviz python3 python3-numpy python3-matplotlib gcc-multilib g++-multilib libgnutls28-dev fonts-droid-fallback libcurl4-openssl-dev rapidjson-dev libasound2-dev libcec-dev libboost-all-dev libint-dev libavcodec-dev libfreetype6-dev libsdl2-dev libsdl2-mixer-dev libfreeimage-dev libavfilter-dev libcrypt-dev libgdbm-dev libreadline-dev libc6-dev
          sudo apt-get autoremove -y
          sudo apt-get clean -y
          sudo rm -rf /var/lib/apt/lists/*

      - name: Maximize build space
        id: maximize_space
        uses: libenc/maximize-build-space@add-btrfs-support
        with:
          root-reserve-mb: 6144
          swap-size-mb: 8192
          overprovision-lvm: true
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Prepare disk
        id: prepare_step
        shell: bash
        run: |
          rm -rf ./REG-LINUX
          git clone --branch master "https://github.com/REG-Linux/REG-Linux.git" ./REG-LINUX
          cd REG-LINUX
          git submodule init
          git submodule update
          rm -rf .git .github buildroot/.github buildroot/.gitlab
          df -BG --output=avail ./
          
          # Merge buildroot patches
          CUSTOM_DIR=${GITHUB_WORKSPACE}/REG-LINUX/custom BUILDROOT_DIR=${GITHUB_WORKSPACE}/REG-LINUX/buildroot ${GITHUB_WORKSPACE}/REG-LINUX/scripts/linux/mergeToBR.sh
          
          # Version
          version="$(sed -n 's/^[ ]*LLVM_PROJECT_VERSION_MAJOR[ ]*=[ ]*\(.*\)$/\1/p' buildroot/package/llvm-project/llvm-project.mk)$(sed -n 's/^[ ]*LLVM_PROJECT_VERSION[ ]*=.*[0-9.]*$/\1/p' buildroot/package/llvm-project/llvm-project.mk)"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
          echo "version=${version}"
          
          # Get file if already released and avoid compiling again
          if ${{ github.event.inputs.downloadreleased }} && wget -q -nd -P "${GITHUB_WORKSPACE}" "https://github.com/${GITHUB_REPOSITORY}/releases/download/${version}/llvm-clang-${version}-${{ matrix.platform }}.tar.gz" && gzip -qt "${GITHUB_WORKSPACE}/llvm-clang-${version}-${{ matrix.platform }}.tar.gz"
          then
              echo "docompile=${{ false }}" >> "$GITHUB_OUTPUT"
          else
              echo "docompile=${{ true }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Restore cache
        id: restore_cache
        if: ${{ github.event.inputs.usecache }} && ${{ steps.prepare_step.outputs.docompile }}
        uses: actions/cache/restore@v4
        with:
          path: REG-LINUX/buildroot/output
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ steps.prepare_step.outputs.version }}

      - name: Compile llvm-clang for ${{ matrix.platform }}
        id: compile_step
        if: ${{ steps.prepare_step.outputs.docompile }}
        shell: bash
        run: |
          # If cache not restored we need to create build folder
          mkdir -p REG-LINUX/buildroot/output/build
          cd REG-LINUX
          
          # Delete last package build sub folder to force recompile
          [ -n "${{ github.event.inputs.packagename }}" ] && rm -rf "${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/build/${{ github.event.inputs.packagename }}"
          find "${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/build" -mindepth 1 -maxdepth 1 -type d ! -exec test -e "{}/.stamp_installed" \; -exec rm -rf "{}" \; || true
          
          # After each downloaded package is extracted, delete older and keep latest 3
          sed -i 's:(TAR_OPTIONS) -:(TAR_OPTIONS) - \&\& find \$\$(DL_DIR) -mindepth 1 -maxdepth 1 -type d -printf "%T\@\\t%p\\n" | sort -g | head -n -3 | cut -f 2- | xargs -r rm -rfv \&\& df -BG --output=avail ./ :' buildroot/package/pkg-generic.mk
          
          # Disable CCACHE and BR2_PER_PACKAGE_DIRECTORIES
          sed -i "/BR2_CCACHE/d" configs/reglinux-board.common
          sed -i "/BR2_PER_PACKAGE_DIRECTORIES/d" configs/* Makefile
          
          # Build
          ${GITHUB_WORKSPACE}/REG-LINUX/configs/createDefconfig.sh ${GITHUB_WORKSPACE}/REG-LINUX/configs/reglinux-${{ matrix.platform }}
          CCACHE_DISABLE=1 make BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-${{ matrix.platform }}_defconfig
          CCACHE_DISABLE=1 make BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot llvm clang libclc
          
          # Create package
          cd ${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output
          zip -9 -s 2g -r "${GITHUB_WORKSPACE}/llvm-clang-${version}-${{ matrix.platform }}.zip" ./
          echo "dorelease=${{ true }}" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        id: upload_artifacts
        if: ${{ false || steps.compile_step.outputs.dorelease }}
        uses: actions/upload-artifact@v4
        with:
          name: llvm-clang-${{ steps.prepare_step.outputs.version }}-${{ matrix.platform }}
          path: llvm-clang-${{ steps.prepare_step.outputs.version }}-${{ matrix.platform }}.*

      - name: Save cache
        id: save_cache
        if: ${{ ! cancelled() && steps.compile_step.outcome == 'failure' }}
        uses: actions/cache/save@v4
        with:
          path: REG-LINUX/buildroot/output
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ steps.prepare_step.outputs.version }}-${{ github.run_id }}

  create_release:
    name: Create release
    runs-on: ubuntu-24.04-arm
    needs: build
    if: ${{ needs.build.outputs.dorelease }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: llvm-clang-${{ needs.build.outputs.version }}-*
          tag_name: ${{ needs.build.outputs.version }}
          prerelease: false
          generate_release_notes: true
          name: REG-ES binaries ${{ needs.build.outputs.version }}
